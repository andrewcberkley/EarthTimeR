% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate_choropleth.R
\name{interpolate_choropleth}
\alias{interpolate_choropleth}
\title{A Choropleth Interpolation Function}
\usage{
interpolate_choropleth(
  dataframe,
  name_key,
  start_year,
  end_year,
  time_intervals,
  interpolation_rule = 1
)
}
\arguments{
\item{dataframe}{Specify the name of the dataframe that you'd like to interpolate.}

\item{name_key}{Specify the column name (in quotes) that serves as the "key" for your dataframe. For a dataframe formatted in a "wide" choropleth style for EarthTime, this will often be the first column with the place names.}

\item{start_year}{Specify the year the data begins. Due to the nature of the function, it is highly recommended that that date intervals are in years rather than days or months.}

\item{end_year}{Specify the year the data ends. Due to the nature of the function, it is highly recommended that that date intervals are in years rather than days or months.}

\item{time_intervals}{A vector of all the dataframe's time intervals that will be used as reference points for the interpolation function. Use, e.g., time_intervals = c(2002, 2007, 2011, 2013, 2019)}

\item{interpolation_rule}{An integer (of length 0 or 1) describing how interpolation is to take place outside the interval (min(x), max(x)). If rule is 0 then NAs are returned for such points and if it is 1, the value at the closest data extreme is used. Defaults to 1.}
}
\description{
While most interpolation functions are performed on "long" dataframes, this function performs interpolation of missing values on a choropleth style dataframe or any type of "wide" dataframe.
}
\examples{
\dontrun{
interpolated_df <- interpolate_choropleth(dataframe, name_key, start_year, end_year, time_intervals, interpolation_rule)
}
}
\keyword{interpolation}
\keyword{linear}
